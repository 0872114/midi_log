import io
import json
import logging
import os
import sqlite3
import time
from datetime import datetime, timedelta

import rtmidi
from dateutil import parser
from mido import Message, MidiTrack
from mido import MidiFile

log = logging.getLogger()
log.addHandler(logging.StreamHandler())
log.setLevel(logging.DEBUG)


class MidiLog:
    DB_PATH = "data/midi_log.db"
    MAX_RETIRES = 3

    def __init__(self):
        self.retires = 0
        self.con = sqlite3.connect(self.DB_PATH)
        self.cur = self.con.cursor()
        self.cur.execute("""
                CREATE TABLE IF NOT EXISTS midi_log (
                    ID INTEGER PRIMARY KEY, 
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, 
                    input_name varchar(128), 
                    message_type varchar(128), 
                    message varchar(255))
            """)

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.cur.close()
        self.conn.close()
        super().__exit__()

    def refresh_cursor(self):
        log.warning('refresh connection')
        self.con = sqlite3.connect()
        self.cur = self.con.cursor()

    def retry(self, input_name, message):
        self.retires += 1
        if self.retires == self.MAX_RETIRES:
            time.sleep(1)
            self.retires = 0
            self.retry(input_name, message)
        try:
            self.refresh_cursor()
            self.add_messages(input_name, message)
        except Exception as e:
            log.error(e)
            log.error(e)
            time.sleep(.01)
            self.retry()

    def add_messages(self, input_name, message):
        timestamp = datetime.utcnow()
        data = [(
            timestamp,
            input_name,
            message.type,
            json.dumps(message.dict())
        )]
        log.debug("add message %s" % str(data))

        try:
            self.cur.executemany(
                "INSERT INTO midi_log VALUES(NULL, ?, ?, ?, ?)", data
            )
            self.con.commit()
        except Exception as e:
            log.exception(e)
            self.retry(input_name, message)
        else:
            self.retires = 0

    def get_midi_logs(self, days: int, input_name: str = None) -> list[tuple[str, bytes, int, str, str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MIDI-—Ñ–∞–π–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –∏–º—è —Ñ–∞–π–ª–∞
        - –¥–∞–Ω–Ω—ã–µ –≤ bytes
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ç
        - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥)
        - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—á—á:–º–º)
        """
        try:
            # 1. –ó–∞–ø—Ä–æ—Å –∫ –ë–î —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            query = """
                SELECT timestamp, message 
                FROM midi_log 
                WHERE timestamp >= ? 
                {}  -- –§–∏–ª—å—Ç—Ä –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                ORDER BY timestamp
            """
            conditions = []
            params = []

            if days > 0:
                cutoff_date = (datetime.utcnow() - timedelta(days=days)).isoformat()
                params.append(cutoff_date)
            else:
                params.append("1970-01-01")  # –í—Å–µ –∑–∞–ø–∏—Å–∏

            if input_name:
                conditions.append("AND input_name = ?")
                params.append(input_name)

            query = query.format(" ".join(conditions))
            self.cur.execute(query, params)
            records = self.cur.fetchall()

            if not records:
                return []

            # 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º (–∏–Ω—Ç–µ—Ä–≤–∞–ª >=1 –º–∏–Ω—É—Ç—ã = –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è)
            sessions = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π
            session_id = 0
            prev_timestamp = parser.parse(records[0][0])

            for row in records:
                current_timestamp = parser.parse(row[0])
                if (current_timestamp - prev_timestamp) >= timedelta(minutes=1):
                    session_id += 1
                if session_id not in sessions:
                    sessions[session_id] = {
                        "start_time": current_timestamp,
                        "messages": []
                    }
                sessions[session_id]["messages"].append((current_timestamp, json.loads(row[1])))
                prev_timestamp = current_timestamp

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ MIDI-—Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
            result = []
            for session_id, data in sessions.items():
                midi_file = MidiFile()
                track = MidiTrack()
                midi_file.tracks.append(track)

                prev_time = data["start_time"]
                notes_count = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–æ—Ç

                for timestamp, msg_dict in data["messages"]:
                    delta_ticks = int((timestamp - prev_time).total_seconds() * 1000)
                    msg = Message.from_dict(msg_dict)
                    msg.time = delta_ticks
                    track.append(msg)
                    prev_time = timestamp

                    # –ü–æ–¥—Å—á–µ—Ç –Ω–æ—Ç
                    if msg.type == 'note_on':
                        notes_count += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
                midi_bytes = io.BytesIO()
                midi_file.save(file=midi_bytes)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                device_tag = f"_{input_name}" if input_name else ""
                start_time = data['start_time']
                session_name = f"session_{session_id}{device_tag}_{start_time.strftime('%Y-%m-%d_%H-%M')}.mid"
                formatted_date = start_time.strftime("%d.%m.%Y")
                formatted_time = start_time.strftime("%H:%M")

                result.append((
                    session_name,
                    midi_bytes.getvalue(),
                    notes_count,
                    formatted_date,
                    formatted_time
                ))

            return result

        except Exception as e:
            logging.error(f"Error in get_midi_logs: {e}")
            return []

    def play_midi(self, ordered_num: int, output_device: str = None) -> str:
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç MIDI-—Ñ–∞–π–ª –ø–æ –Ω–æ–º–µ—Ä—É —Å–µ—Å—Å–∏–∏
        :param ordered_num: –ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ –≤ —Å–ø–∏—Å–∫–µ
        :param output_device: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
        :return: –°—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º MIDI-—Ñ–∞–π–ª –∏–∑ –ë–î
            query = """
                SELECT timestamp, message 
                FROM midi_log 
                WHERE session_id = (
                    SELECT session_id 
                    FROM (
                        SELECT DISTINCT session_id 
                        FROM midi_log 
                        ORDER BY MIN(timestamp)
                    ) 
                    LIMIT 1 OFFSET ?
                )
                ORDER BY timestamp
            """
            self.cur.execute(query, (ordered_num - 1,))
            records = self.cur.fetchall()

            if not records:
                return f"üö´ –°–µ—Å—Å–∏—è ‚Ññ{ordered_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            # 2. –°–æ–∑–¥–∞–µ–º MIDI-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            midi_file = MidiFile()
            track = MidiTrack()
            midi_file.tracks.append(track)

            prev_time = parser.parse(records[0][0])
            for row in records:
                current_time = parser.parse(row[0])
                delta = int((current_time - prev_time).total_seconds() * 1000)
                msg = Message.from_dict(json.loads(row[1]))
                msg.time = delta
                track.append(msg)
                prev_time = current_time

            # 3. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            try:
                import rtmidi

                midi_out = rtmidi.MidiOut()
                available_ports = midi_out.get_ports()

                if output_device:
                    if output_device not in available_ports:
                        return f"üö´ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{output_device}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_ports)}"

                    port_index = available_ports.index(output_device)
                    midi_out.open_port(port_index)
                    device_info = output_device
                else:
                    if available_ports:
                        midi_out.open_port(0)
                        device_info = available_ports[0]
                    else:
                        midi_out.open_virtual_port("Virtual Output")
                        device_info = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"

                # 4. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def play_thread():
                    try:
                        for msg in midi_file:
                            if msg.type in ['note_on', 'note_off', 'control_change']:
                                midi_out.send_message(msg.bytes())
                            time.sleep(msg.time / 1000)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ms –≤ —Å–µ–∫—É–Ω–¥—ã
                    finally:
                        midi_out.close_port()
                        del midi_out

                import threading
                threading.Thread(target=play_thread, daemon=True).start()

                return f"üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–µ—Å—Å–∏—è ‚Ññ{ordered_num} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device_info}"

            except ImportError:
                # Fallback –¥–ª—è —Å–∏—Å—Ç–µ–º –±–µ–∑ rtmidi
                import pygame.midi
                pygame.midi.init()

                device_id = 0
                if output_device:
                    for i in range(pygame.midi.get_count()):
                        info = pygame.midi.get_device_info(i)
                        if info[1].decode() == output_device and info[2] == 0:
                            device_id = i
                            break

                player = pygame.midi.Output(device_id)
                for msg in midi_file:
                    if msg.type in ['note_on', 'note_off']:
                        player.write_short(msg.bytes())
                    time.sleep(msg.time / 1000)
                player.close()

                return f"üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —Å–µ—Å—Å–∏—è ‚Ññ{ordered_num} (—á–µ—Ä–µ–∑ pygame.midi)"

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è MIDI: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ‚Ññ{ordered_num}"

    def get_session_by_id(self, session_id: int, input_name: str = None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É
        :param session_id: –ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        :param input_name: –§–∏–ª—å—Ç—Ä –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: –ö–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            all_sessions = self.get_midi_logs(days=0, input_name=input_name)
            if session_id < 0 or session_id >= len(all_sessions):
                return None
            return all_sessions[session_id]
        except Exception as e:
            logging.error(f"Error in get_session_by_id: {e}")
            return None

    async def send_midi_visualization(self, chat_id: int, session_id: int, input_name: str = None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        :param chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        :param session_id: –ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏
        :param input_name: –§–∏–ª—å—Ç—Ä –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = self.get_session_by_id(session_id, input_name)
            if not session_data:
                await self.bot.send_message(chat_id, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º MIDI –¥–∞–Ω–Ω—ã–µ
            midi_bytes = session_data[1]

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with io.BytesIO(midi_bytes) as midi_stream:
                midi_file = MidiFile(file=midi_stream)

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                notes = []
                times = []

                for i, track in enumerate(midi_file.tracks):
                    current_time = 0
                    for msg in track:
                        current_time += msg.time
                        if msg.type == 'note_on' and msg.velocity > 0:
                            notes.append(msg.note)
                            times.append(current_time / 1000)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã

                if not notes:
                    await self.bot.send_message(chat_id, "–í —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ—Ç")
                    return

                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                plt.figure(figsize=(10, 5))
                plt.scatter(times, notes, alpha=0.5)
                plt.title(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}")
                plt.xlabel("–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)")
                plt.ylabel("–í—ã—Å–æ—Ç–∞ –Ω–æ—Ç—ã")
                plt.grid(True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with io.BytesIO() as plot_buffer:
                    plt.savefig(plot_buffer, format='png')
                    plot_buffer.seek(0)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=plot_buffer,
                        caption=f"–°–µ—Å—Å–∏—è {session_id} | {session_data[3]} {session_data[4]}\n"
                                f"–í—Å–µ–≥–æ –Ω–æ—Ç: {session_data[2]}"
                    )

                plt.close()

        except Exception as e:
            logging.error(f"Error in send_midi_visualization: {e}")
            await self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")