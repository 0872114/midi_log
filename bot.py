from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import io
import logging
import os
import zipfile
from collections import defaultdict
from contextlib import suppress
from datetime import datetime
from pathlib import Path
from typing import List
import matplotlib.pyplot as plt

import mido
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message
from mido import MidiFile

from data_engine import MidiLog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è MIDI-—Ñ–∞–π–ª–æ–≤
TEMP_DIR = "temp_midi"
os.makedirs(TEMP_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
active_ports = {}
output_devices_cache = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.environ.get("bot_token")
if not API_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
try:
    db = MidiLog()
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    raise


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_period_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="period_week"),
            InlineKeyboardButton(text="–í—Å—ë –≤—Ä–µ–º—è", callback_data="period_all"),
        ]
    ])
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    try:
        await message.reply(
            "üéπ –ë–æ—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ MIDI-–ª–æ–≥–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_period_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        with suppress(Exception):
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(F.data.startswith("period_"))
async def process_callback(callback_query: types.CallbackQuery):
    try:
        if not callback_query.message:
            logger.warning("Callback –±–µ–∑ message!")
            return

        period = callback_query.data.split('_')[1]  # today, week –∏–ª–∏ all
        days = {
            'today': 1,
            'week': 7,
            'all': 0
        }.get(period, 1)

        await callback_query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é MIDI –∑–∞ {period}...")
        await send_midi_files(callback_query.message, days)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_callback: {e}")
        with suppress(Exception):
            await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


def format_notes_count(notes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    if not isinstance(notes, int):
        return "–Ω/–¥ –Ω–æ—Ç"

    last_digit = notes % 10
    last_two_digits = notes % 100

    if 11 <= last_two_digits <= 19:
        word = "–Ω–æ—Ç"
    elif last_digit == 1:
        word = "–Ω–æ—Ç–∞"
    elif 2 <= last_digit <= 4:
        word = "–Ω–æ—Ç—ã"
    else:
        word = "–Ω–æ—Ç"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
    formatted_num = "{:,}".format(notes).replace(",", " ")
    return f"{formatted_num} {word}"


async def send_midi_files(message: types.Message, days: int, input_name: str = None):
    try:
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (name, data, notes_count, formatted_date, formatted_time)
        midi_sessions = db.get_midi_logs(days, input_name)

        if not midi_sessions:
            await message.reply("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.",
                                reply_markup=get_period_keyboard())
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—Ç
        date_sessions = defaultdict(list)
        total_notes = sum(session[2] for session in midi_sessions)

        for name, data, notes_count, formatted_date, formatted_time in midi_sessions:
            date_sessions[formatted_date].append({
                'time': formatted_time,
                'notes': notes_count,
                'name': name,
                'data': data
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–Ω—É—Ç—Ä–∏ –¥–∞—Ç
        for date in date_sessions:
            date_sessions[date].sort(key=lambda x: x['time'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        file_list = []
        current_number = 1

        for date, sessions in sorted(date_sessions.items(),
                                     key=lambda x: datetime.strptime(x[0], "%d.%m.%Y"),
                                     reverse=True):
            file_list.append(f"\nüìÖ {date}:")
            for session in sessions:
                notes_text = format_notes_count(session['notes'])
                file_list.append(f"  {current_number}. –°–µ—Å—Å–∏—è {session['time']} ({notes_text})")
                current_number += 1

        file_list_text = "\n".join(file_list)
        total_notes_text = format_notes_count(total_notes)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if len(midi_sessions) == 1:
            session = midi_sessions[0]
            await message.reply_document(
                document=types.BufferedInputFile(session[1], filename=session[0]),
                caption=f"üéµ MIDI-—Å–µ—Å—Å–∏—è: {file_list_text}"
            )
        else:
            with io.BytesIO() as zip_bytes:
                with zipfile.ZipFile(zip_bytes, 'w') as zipf:
                    for session in midi_sessions:
                        zipf.writestr(session[0], session[1])

                zip_data = zip_bytes.getvalue()
                if len(zip_data) > 50 * 1024 * 1024:
                    await message.reply("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    return

                await message.reply_document(
                    document=types.BufferedInputFile(
                        file=zip_data,
                        filename=f"midi_sessions_{days}_days.zip"
                    ),
                    caption=f"üì¶ –§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:\n{file_list_text}"
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_midi_files: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ MIDI.", reply_markup=get_period_keyboard())


def safe_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    keepchars = (' ', '.', '_', '-')
    return "".join(c for c in filename if c.isalnum() or c in keepchars).rstrip()


# –ö–æ–º–∞–Ω–¥—ã /today, /week, /all
@dp.message(Command("today"))
async def today_midi(message: types.Message):
    await send_midi_files(message, 1)


@dp.message(Command("week"))
async def week_midi(message: types.Message):
    await send_midi_files(message, 7)


@dp.message(Command("all"))
async def all_midi(message: types.Message):
    await send_midi_files(message, 0)


# –ü–ª–µ–µ—Ä
def get_output_names() -> List[str]:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MIDI-—É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        return mido.get_output_names()
    except Exception as e:
        logger.error(f"Error getting MIDI devices: {e}")
        return []


@dp.message(Command("devices"))
async def list_devices(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /devices"""
    try:
        output_devices = get_output_names()
        if not output_devices:
            await message.reply("üî¥ MIDI-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return

        response = ["üéµ –î–æ—Å—Ç—É–ø–Ω—ã–µ MIDI-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"]
        for i, device in enumerate(output_devices, 1):
            response.append(f"{i}. {device}")

        response.append("\n‚ÑπÔ∏è –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play <–Ω–æ–º–µ—Ä_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞>")
        await message.reply("\n".join(response))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        global output_devices_cache
        output_devices_cache = output_devices
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_devices: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")


@dp.message(Command("play"))
async def play_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play"""
    try:
        args = message.text.split()[1:]
        if len(args) < 1:
            await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /play <–Ω–æ–º–µ—Ä_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞>")
            return

        device_num = int(args[0])
        output_devices = get_output_names()

        if not output_devices:
            await message.reply("üî¥ MIDI-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /devices –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        if device_num < 1 or device_num > len(output_devices):
            await message.reply(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(output_devices)}")
            return

        port_name = output_devices[device_num - 1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_file = Path(TEMP_DIR) / f"{message.from_user.id}.mid"
        if not user_file.exists():
            await message.reply("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ MIDI-—Ñ–∞–π–ª.")
            return

        await message.reply(f"üîÑ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {port_name}...")

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ñ–∞–π–ª
        if play_midi_file(port_name, str(user_file)):
            await message.reply("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ MIDI-—Ñ–∞–π–ª–∞")
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ play_handler: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏")


@dp.message(F.document)
async def handle_midi_file(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è MIDI-—Ñ–∞–π–ª–∞"""
    try:
        if message.document.mime_type != "audio/midi":
            await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MIDI (.mid)")
            return

        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        user_file = Path(TEMP_DIR) / f"{message.from_user.id}.mid"
        await bot.download_file(file_path, destination=user_file)

        await message.reply(
            "üé∂ MIDI-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /devices –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "–∏ /play <–Ω–æ–º–µ—Ä_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞> –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MIDI-—Ñ–∞–π–ª–∞: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")


@dp.message(Command("notes"))
async def handle_visualize(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ /notes)
        command_args = message.text.split()[1:] if message.text else []

        session_id = int(command_args[0]) if len(command_args) > 0 else 0
        input_name = command_args[1] if len(command_args) > 1 else None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        session_data = db.get_session_by_id(session_id, input_name)
        if not session_data:
            await message.reply("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º MIDI –¥–∞–Ω–Ω—ã–µ
        midi_bytes = session_data[1]

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with io.BytesIO(midi_bytes) as midi_stream:
            midi_file = MidiFile(file=midi_stream)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            notes = []
            times = []

            for i, track in enumerate(midi_file.tracks):
                current_time = 0
                for msg in track:
                    current_time += msg.time
                    if msg.type == 'note_on' and msg.velocity > 0:
                        notes.append(msg.note)
                        times.append(current_time / 1000)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã

            if not notes:
                await message.reply("–í —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ—Ç")
                return

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            plt.figure(figsize=(10, 5))
            plt.scatter(times, notes, alpha=0.5)
            plt.title(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}")
            plt.xlabel("–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)")
            plt.ylabel("–í—ã—Å–æ—Ç–∞ –Ω–æ—Ç—ã")
            plt.grid(True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with io.BytesIO() as plot_buffer:
                plt.savefig(plot_buffer, format='png')
                plot_buffer.seek(0)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await message.reply_photo(
                    photo=types.BufferedInputFile(
                        file=plot_buffer.getvalue(),
                        filename=f"notes_visualization_{session_id}.png"
                    ),
                    caption=f"–°–µ—Å—Å–∏—è {session_id} | {session_data[3]} {session_data[4]}\n"
                            f"–í—Å–µ–≥–æ –Ω–æ—Ç: {session_data[2]}"
                )

            plt.close()

    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notes [–Ω–æ–º–µ—Ä_—Å–µ—Å—Å–∏–∏] [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ]")
    except Exception as e:
        logging.error(f"Error in handle_visualize: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è MIDI
def play_midi_file(port_name: str, file_path: str) -> bool:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ MIDI-—Ñ–∞–π–ª–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    try:
        with mido.open_output(port_name) as port:
            midi_file = MidiFile(file_path)
            for msg in midi_file.play():
                port.send(msg)
        return True
    except Exception as e:
        logging.error(f"Error in play_midi_file: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        with suppress(Exception):
            db.close()
