import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F  # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
from data_engine import MidiLog  # –í–∞—à –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import io
import os
import zipfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.environ.get("bot_token")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher()  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ aiogram 3.x

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
if not os.path.exists('temp'):
    os.makedirs('temp')


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_period_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="period_week"),
            InlineKeyboardButton(text="–í—Å—ë –≤—Ä–µ–º—è", callback_data="period_all"),
        ]
    ])
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    await message.reply(
        "üéπ –ë–æ—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ MIDI-–ª–æ–≥–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("period_"))
async def process_callback(callback_query: types.CallbackQuery):
    period = callback_query.data.split('_')[1]  # today, week –∏–ª–∏ all
    days = {
        'today': 1,
        'week': 7,
        'all': 0
    }.get(period, 1)

    await callback_query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é MIDI –∑–∞ {period}...")
    await send_midi_files(callback_query.message, days)


@dp.message(Command("play"))
async def handle_play_command(message: types.Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play <–Ω–æ–º–µ—Ä_—Å–µ—Å—Å–∏–∏>")
        return

    ordered_num = int(args[1])
    result = MidiLog().play_midi(ordered_num)
    await message.reply(result)


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ MIDI
async def send_midi_files(message: types.Message, days: int, input_name: str = None):
    try:
        midi_sessions = MidiLog().get_midi_logs(days, input_name)

        if not midi_sessions:
            await message.reply("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.", reply_markup=get_period_keyboard())
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        file_list = "\n".join(
            f"{i + 1}. {name.replace('.mid', '')}"
            for i, (name, _) in enumerate(midi_sessions)
        )

        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –æ–¥–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if len(midi_sessions) == 1:
            session_name, midi_data = midi_sessions[0]
            await message.reply_document(
                document=types.BufferedInputFile(midi_data, filename=session_name),
                caption=f"üéµ MIDI-—Å–µ—Å—Å–∏—è: {file_list}"
            )
        else:
            # –°–æ–∑–¥–∞–µ–º ZIP —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            zip_bytes = io.BytesIO()
            with zipfile.ZipFile(zip_bytes, 'w') as zipf:
                for i, (name, data) in enumerate(midi_sessions):
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã: "1_session_1_2023-10-25_14-30.mid"
                    new_name = f"{i + 1}_{name}"
                    zipf.writestr(new_name, data)

            await message.reply_document(
                document=types.BufferedInputFile(
                    file=zip_bytes.getvalue(),
                    filename=f"midi_sessions_{days}_days.zip"
                ),
                caption=f"üì¶ –§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:\n{file_list}"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ MIDI.", reply_markup=get_period_keyboard())


# –ö–æ–º–∞–Ω–¥—ã /today, /week, /all
@dp.message(Command("today"))
async def today_midi(message: types.Message):
    await send_midi_files(message, 1)


@dp.message(Command("week"))
async def week_midi(message: types.Message):
    await send_midi_files(message, 7)


@dp.message(Command("all"))
async def all_midi(message: types.Message):
    await send_midi_files(message, 0)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–ª—è aiogram 3.x)
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())